{"/home/travis/build/npmtest/node-npmtest-mocha-casperjs/test.js":"/* istanbul instrument in package npmtest_mocha_casperjs */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-mocha-casperjs/lib.npmtest_mocha_casperjs.js":"/* istanbul instrument in package npmtest_mocha_casperjs */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_mocha_casperjs = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_mocha_casperjs = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-mocha-casperjs/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-mocha-casperjs && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_mocha_casperjs */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_mocha_casperjs\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_mocha_casperjs.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_mocha_casperjs.rollup.js'] =\n            local.assetsDict['/assets.npmtest_mocha_casperjs.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_mocha_casperjs.__dirname + '/lib.npmtest_mocha_casperjs.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-mocha-casperjs/node_modules/mocha-casperjs/mocha-casperjs.js":"module.exports = function (Mocha, casper, utils) {\n  var currentDone,\n      currentTest,\n      f = utils.format,\n\n  reportError = function() {\n    casper.checker = null\n    if (currentDone && (!currentTest || !currentTest.state)) {\n      // the first error takes priority\n      currentDone(currentTest.errors && currentTest.errors[0])\n    }\n  },\n\n  failTest = function(error) {\n    casper.unwait()\n    clearInterval(casper.checker)\n\n    if (currentTest.errors) {\n      currentTest.errors.push(error)\n    } else {\n      currentTest.errors = [error]\n    }\n\n    if ( casper.step < casper.steps.length ) {\n      casper.run(function() {\n        reportError();\n      });\n    } else {\n      reportError();\n    }\n  },\n\n  resetSteps = function() {\n    casper.bypass(casper.steps.length)\n  }\n\n  Mocha.prototype.failCurrentTest = failTest;\n\n  // hookup to all the various casper error events and save that error to report to mocha later\n  [\n    'error',\n    'wait.error',\n    'waitFor.timeout.error',\n    'event.error',\n    'complete.error',\n    'step.error'\n  ].forEach(function(event) {\n    casper.on(event, function(error) {\n      failTest(error)\n    })\n  })\n\n  casper.on('waitFor.timeout', function(timeout, details) {\n    resetSteps()\n    var message = f('waitFor timeout of %dms occured', timeout)\n    details = details || {}\n\n    if (details.selector) {\n      message = f(details.waitWhile ? '\"%s\" never went away in %dms' : '\"%s\" still did not exist %dms', details.selector, timeout)\n    }\n    else if (details.visible) {\n      message = f(details.waitWhile ? '\"%s\" never disappeared in %dms' : '\"%s\" never appeared in %dms', details.visible, timeout)\n    }\n    else if (details.url) {\n      message = f('%s did not load in %dms', details.url, timeout)\n    }\n    else if (details.popup) {\n      message = f('%s did not pop up in %dms', details.popup, timeout)\n    }\n    else if (details.text) {\n      message = f('\"%s\" did not appear in the page in %dms', details.text, timeout)\n    }\n    else if (details.selectorTextChange) {\n      message = f('\"%s\" did not have a text change in %dms', details.selectorTextChange, timeout)\n    }\n    else if (typeof details.testFx === 'Function') {\n      message = f('\"%s\" did not appear in the page in %dms', details.testFx.toString(), timeout)\n    }\n\n    failTest(new Error(message))\n  })\n\n  casper.on('step.timeout', function(step) {\n    resetSteps()\n    failTest(new Error(f('step %d timed out (%dms)', step, casper.options.stepTimeout)))\n  })\n  casper.on('timeout', function() {\n    resetSteps()\n    failTest(new Error(f('Load timeout of (%dms)', casper.options.timeout)))\n  })\n\n  // clear Casper's default handlers for these as we handle everything through events\n  casper.options.onTimeout = casper.options.onWaitTimeout = casper.options.onStepTimeout = function() {}\n\n  // casper will exit on step failure by default\n  casper.options.silentErrors = true\n\n  // Method for patching mocha to run casper steps is inspired by https://github.com/domenic/mocha-as-promised\n  //\n  Object.defineProperties(Mocha.Runnable.prototype, {\n    fn: {\n      configurable: true,\n      enumerable: true,\n      get: function () {\n        return this.casperWraperFn;\n      },\n      set: function (fn) {\n        Object.defineProperty(this, 'casperWraperFn', {\n          value: function (done) {\n            currentTest = this.test\n            currentDone = done\n\n            // Run the original `fn`, passing along `done` for the case in which it's callback-asynchronous.\n            // Make sure to forward the `this` context, since you can set variables and stuff on it to share\n            // within a suite.\n            fn.call(this, done)\n\n            // only flush the casper steps on test Runnables,\n            // and if there are steps not ran,\n            // and no set of steps are running (casper.checker is the setInterval for the checkSteps call)\n\n            if (currentTest && casper.steps && casper.steps.length &&\n                casper.step < casper.steps.length && !casper.checker) {\n              casper.run(function () {\n                casper.checker = null\n                if (!currentTest || !currentTest.state) {\n                  done()\n                }\n              })\n            } else if (fn.length === 0 && currentTest && !currentTest.state) {\n              // If `fn` is synchronous (i.e. didn't have a `done` parameter and didn't return a promise),\n              // call `done` now. (If it's callback-asynchronous, `fn` will call `done` eventually since\n              // we passed it in above.)\n              done()\n            }\n          },\n          writable: true,\n          configurable: true\n        })\n\n        this.casperWraperFn.toString = function () {\n          return fn.toString();\n        }\n      }\n    },\n    async: {\n      configurable: true,\n      enumerable: true,\n      get: function () {\n        return typeof this.casperWraperFn === 'function'\n      },\n      set: function () {\n        // Ignore Mocha trying to set this - tests are always asyncronous with our wrapper\n      }\n    }\n  })\n\n  // Mocha needs the formating feature of console.log so copy node's format function and\n  // monkey-patch it into place. This code is copied from node's, links copyright applies.\n  // https://github.com/joyent/node/blob/master/lib/util.js\n  console.format = function (f) {\n    var i;\n    if (typeof f !== 'string') {\n      var objects = [];\n      for (i = 0; i < arguments.length; i++) {\n        objects.push(JSON.stringify(arguments[i]));\n      }\n      return objects.join(' ');\n    }\n    i = 1;\n    var args = arguments;\n    var len = args.length;\n    var str = String(f).replace(/%[sdj%]/g, function(x) {\n      if (x === '%%') return '%';\n      if (i >= len) return x;\n      switch (x) {\n        case '%s': return String(args[i++]);\n        case '%d': return Number(args[i++]);\n        case '%j': return JSON.stringify(args[i++]);\n        default:\n          return x;\n      }\n    });\n    for (var x = args[i]; i < len; x = args[++i]) {\n      if (x === null || typeof x !== 'object') {\n        str += ' ' + x;\n      } else {\n        str += ' ' + JSON.stringify(x);\n      }\n    }\n    return str;\n  };\n\n  var origError = console.error,\n      origLog = console.log\n  console.error = function() { origError.call(console, console.format.apply(console, arguments)) }\n  console.log = function() { origLog.call(console, console.format.apply(console, arguments)) }\n\n  // Since we're using the precompiled version of mocha usually meant for the browser, \n  // patch the expossed process object (thanks mocha-phantomjs users for ensuring it's exposed)\n  // https://github.com/visionmedia/mocha/issues/770\n  Mocha.process = Mocha.process || {}\n  Mocha.process.stdout = require('system').stdout\n}\n","/home/travis/build/npmtest/node-npmtest-mocha-casperjs/node_modules/mocha-casperjs/bin/cli.js":"var cli = require('cli'),\n    cliOptions = cli.parse(require('system').args.slice(1)),\n    opts = cliOptions.options,\n    optsFile = opts.opts || 'mocha-casperjs.opts',\n    fs = require('fs'),\n    Casper = require('casper'),\n    extraArgs = [],\n\ngetPathForModule = function(what) {\n  return fs.absolute(opts[what + '-path'] || opts['mocha-casperjs-path'] + '/../../node_modules/' + what)\n}\n\nif (fs.exists(optsFile)) {\n  var extraOpts = cli.parse(['blah'].concat(fs.read(optsFile).split('\\n'))).options\n  extraArgs = cli.parse((fs.read(optsFile).split('\\n'))).args;\n\n  for (var p in extraOpts) {\n    if (opts[p] == null) {\n      opts[p] = extraOpts[p]\n    }\n  }\n}\n\n// Load casper\nthis.casper = Casper.create({\n  exitOnError: true,\n  timeout: opts['casper-timeout'],\n  verbose: !!opts.verbose || opts['log-level'] === 'debug',\n  logLevel: opts['log-level'] || 'warning',\n  pageSettings: {\n    userAgent: opts['user-agent']\n  },\n  viewportSize: {\n    width: opts['viewport-width'],\n    height: opts['viewport-height']\n  }\n})\nif (typeof opts['client-scripts'] === 'string') {\n  this.casper.options.clientScripts = opts['client-scripts'].split(',')\n}\nif (typeof opts['wait-timeout'] === 'number') {\n  this.casper.options.waitTimeout = opts['wait-timeout']\n}\nif (typeof opts['step-timeout'] === 'number') {\n  this.casper.options.stepTimeout = opts['step-timeout']\n}\n\nthis.xpath = Casper.selectXPath\n\nif (phantom.casperVersion.major !== 1 && phantom.capserVersion.minor < 1) {\n  console.log('mocha-casperjs requires CasperJS >= 1.1.0-beta3')\n  casper.exit(-1)\n}\n\n// Load the precompiled mocha from the root of it's module directory\nrequire(getPathForModule('mocha') + '/mocha')\n\ntry {\n  this.chai = require(getPathForModule('chai'))\n  this.chai.should()\n\n  // ugly but isolated hack for #40\n  if (['function', 'object'].indexOf(typeof casper.__proto__.fetchText) > -1 && casper.__proto__.fetchText.toString().indexOf('fetchText') === -1) {\n    casper.log('restoring Casper#fetchText', 'debug', 'mocha-casperjs')\n    casper.__proto__.fetchText = function(selector) {\n      this.checkStarted()\n      return this.callUtils(\"fetchText\", selector)\n    }\n  }\n\n  // expect globally if requested\n  this.expect = this.chai.expect\n\n  // optionally try to use casper-chai if available\n  try {\n    this.chai.use(require(getPathForModule('casper-chai')))\n    casper.log('using casper-chai', 'debug', 'mocha-casperjs')\n  }\n  catch (e) {\n    casper.log('could not load casper-chai: ' + e, 'debug', 'mocha-casperjs')\n  }\n} catch (e) {\n  casper.log('could not load chai ' + e, 'debug', 'mocha-casperjs')\n}\n\n// Initialize the core of mocha-casperjs given the loaded Mocha class and casper instance\nrequire(fs.absolute((opts['mocha-casperjs-path'] || '..') + '/mocha-casperjs'))(Mocha, casper, require('utils'))\n\nmocha.setup({\n  ui: opts.ui || 'bdd',\n  timeout: opts.timeout || 30000,\n  bail: opts.bail || false,\n  useColors: !opts['no-color']\n})\n\nif (typeof process === 'undefined') {\n  // a poor node.js process shim - totally not great\n  var sys = require('system')\n  this.process = {\n    pid: sys.pid,\n    env: sys.env,\n    argv: sys.args.splice(),\n    stdin: sys.stdin,\n    stdout: sys.stdout,\n    stderr: sys.stderr\n  }\n}\n\n// Remember that PhantomJS is not Node.js - the modules available to phantomjs are different than node's.\n// If you need access to built-in Mocha reporters, access them off of `Mocha.reporters`, like `Mocha.reporters.Base`.\n// fall back to spec by default\nvar reporter = 'spec'\n\nif (opts.reporter) {\n  // CasperJS's patched require searches it's own modules folder which has an `xunit` reporter already.\n  // See https://github.com/nathanboktae/mocha-casperjs/issues/68\n  // For a few well-known reporters let's just directly load them.\n  if (['spec', 'xunit', 'json'].indexOf(opts.reporter) !== -1) {\n    reporter = opts.reporter\n  }\n  else {\n    // check to see if it is a third party reporter\n    try {\n      // I don't want to use isAbsolute here as it could be a node module or a relative path\n      if (opts.reporter.indexOf('.') === 0) {\n        opts.reporter = fs.absolute(opts.reporter)\n      }\n      reporter = require(opts.reporter)\n    } catch (e) {\n      reporter = opts.reporter\n    }\n  }\n}\n\n// If a third party error throws an error, exit.\ntry {\n  mocha.reporter(reporter)\n} catch(e) {\n  casper.exit(-2);\n}\n\n\nif (opts.grep) {\n  mocha.grep(opts.grep)\n  if (opts.invert) {\n    mocha.invert()\n  }\n}\n\nif (opts.file) {\n  Mocha.process.stdout = fs.open(opts.file, 'w')\n  if (this.process) {\n    this.process.stdout = Mocha.process.stdout\n  }\n}\n\nif (opts.slow) {\n  mocha.slow(opts.slow)\n}\n\nif (opts.require) {\n  require(fs.absolute(opts.require));\n}\n\n// load the user's tests\nvar tests = []\n\nif (cliOptions.args.length > 1) {\n  // use tests if they specified them explicty\n  tests = cliOptions.args.slice()\n  tests.shift()\n} else {\n  // otherwise, load files from the opts directory, test or tests directory like Mocha does\n  var testDir = extraArgs.length && extraArgs[0] || null\n  if (!fs.isDirectory(testDir)) {\n    if (fs.isDirectory('test')) {\n        testDir = 'test'\n    } else if (fs.isDirectory('tests')) {\n      testDir = 'tests'\n    } else {\n      console.log('No tests specified. List them in the console, or add your tests to a \"test\" or \"tests\" folder in the current working directory.')\n      casper.exit(-4)\n    }\n  }\n  tests = fs.list(testDir).filter(function(test) {\n    return test.match(/(\\.js|\\.coffee)$/)\n  }).map(function(test) {\n    return testDir + fs.separator + test\n  })\n}\n\ntests.map(function(test) {\n  return fs.absolute(test).replace('.coffee', '').replace('.js', '')\n}).forEach(function(test) {\n  require(test)\n})\n\n// You can now set breakpoints in your scripts since they are loaded now\ndebugger;\n\n// for convience, expose the current runner on the mocha global\nmocha.runner = mocha.run(function() {\n  if (opts.file) {\n    Mocha.process.stdout.close()\n  }\n  casper.exit(typeof (mocha.runner && mocha.runner.stats && mocha.runner.stats.failures) === 'number' ? mocha.runner.stats.failures : -1);\n});\n","/home/travis/build/npmtest/node-npmtest-mocha-casperjs/node_modules/mocha-casperjs/reporters/jason.js":"\n/**\n * Module dependencies.\n */\n\nvar Base = Mocha.reporters.Base\n  , cursor = Base.cursor\n  , color = Base.color;\n\n/**\n * Expose `JSON`.\n */\n\nexports = module.exports = JSONReporter;\n\n/**\n * Initialize a new `JSON` reporter.\n *\n * @param {Runner} runner\n * @api public\n */\n\nfunction JSONReporter(runner) {\n  var self = this;\n  Base.call(this, runner);\n\n  var tests = []\n    , failures = []\n    , passes = [];\n\n  runner.on('test end', function(test){\n    tests.push(test);\n  });\n\n  runner.on('pass', function(test){\n    passes.push(test);\n  });\n\n  runner.on('fail', function(test){\n    failures.push(test);\n  });\n\n  runner.on('end', function(){\n    var obj = {\n        stats: self.stats\n      , tests: tests.map(clean)\n      , failures: failures.map(clean)\n      , passes: passes.map(clean)\n    };\n\n    process.stdout.write(JSON.stringify(obj, null, 2));\n  });\n}\n\n/**\n * Return a plain-object representation of `test`\n * free of cyclic properties etc.\n *\n * @param {Object} test\n * @return {Object}\n * @api private\n */\n\nfunction clean(test) {\n  return {\n      title: test.title\n    , fullTitle: test.fullTitle()\n    , duration: test.duration\n  }\n}"}